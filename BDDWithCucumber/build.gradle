import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    ext {
    	cucumber_version = '5.7.0'
    }
}

plugins {
	id 'java'
	id 'jacoco'
}

dependencies {
	implementation 'org.junit.jupiter:junit-jupiter-params:${jupiter_version}'
	
	testImplementation "org.mockito:mockito-all:${mockito_version}"
	testImplementation "io.cucumber:cucumber-java:${cucumber_version}"
//	testImplementation "io.cucumber:cucumber-java8:${cucumber_version}"
	testImplementation "io.cucumber:cucumber-junit:${cucumber_version}"
//	testImplementation "io.cucumber:gherkin:13.0.0"
	
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava    
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'com.mibrahim.airport', 'src/test/resources']
            
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
	        jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/results/jacoco/cucumber.exec,append=false"]
	        
	        jacocoTestReport
        }
    }
}
cucumber.finalizedBy jacocoTestReport

jacocoTestReport {
    executionData fileTree(buildDir).include("/results/jacoco/*.exec")
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
    dependsOn test
    dependsOn "cucumber"
}